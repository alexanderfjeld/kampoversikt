import React, { useState, useEffect } from "react";

const FotballApp = () => {
  // Grunnleggende tilstander
  const [currentView, setCurrentView] = useState("welcome");
  const [players, setPlayers] = useState([]);
  const [teamName, setTeamName] = useState("");
  const [ageGroup, setAgeGroup] = useState("G11/J11");
  const [matchTime, setMatchTime] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [selectedPlayers, setSelectedPlayers] = useState([]);
  const [activePlayers, setActivePlayers] = useState([]);
  const [benchPlayers, setBenchPlayers] = useState([]);
  const [homeScore, setHomeScore] = useState(0);
  const [awayScore, setAwayScore] = useState(0);
  const [extraPlayerAllowed, setExtraPlayerAllowed] = useState(false);
  const [showExtraPlayerMessage, setShowExtraPlayerMessage] = useState(false);
  const [showRemovePlayerMessage, setShowRemovePlayerMessage] = useState(false);

  // Aldersgrupper informasjon
  const ageGroups = {
    "G6/J6": { players: 3, time: "2x20 min", totalMinutes: 40 },
    "G7/J7": { players: 3, time: "2x20 min", totalMinutes: 40 },
    "G8/J8": { players: 5, time: "2x25 min", totalMinutes: 50 },
    "G9/J9": { players: 5, time: "2x25 min", totalMinutes: 50 },
    "G10/J10": { players: 7, time: "2x30 min", totalMinutes: 60 },
    "G11/J11": { players: 7, time: "2x30 min", totalMinutes: 60 },
    "G12/J12": { players: 9, time: "2x35 min", totalMinutes: 70 },
  };

  const [playerTimers, setPlayerTimers] = useState({});

  // Timer for kampklokken
  useEffect(() => {
    let interval = null;

    if (isRunning) {
      interval = setInterval(() => {
        setMatchTime((prevTime) => prevTime + 1);

        setPlayerTimers((prevTimers) => {
          const newTimers = { ...prevTimers };

          activePlayers.forEach((player) => {
            if (player && player.id) {
              if (!newTimers[player.id]) {
                newTimers[player.id] = 0;
              }
              newTimers[player.id] += 1;
            }
          });

          return newTimers;
        });
      }, 1000);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning, activePlayers]);

  // Sjekk målforskjell og administrer ekstraspiller
  useEffect(() => {
    const scoreDiff = Math.abs(homeScore - awayScore);
    const wasAllowed = extraPlayerAllowed;
    const nowAllowed = scoreDiff >= 4;

    if (nowAllowed !== wasAllowed) {
      setExtraPlayerAllowed(nowAllowed);

      if (nowAllowed && !wasAllowed) {
        setShowExtraPlayerMessage(true);
        setTimeout(() => setShowExtraPlayerMessage(false), 5000);

        if (benchPlayers.length > 0) {
          addExtraPlayer();
        }
      } else if (!nowAllowed && wasAllowed) {
        setShowRemovePlayerMessage(true);
        setTimeout(() => setShowRemovePlayerMessage(false), 5000);

        const maxPlayers = ageGroups[ageGroup]?.players || 7;
        if (activePlayers.length > maxPlayers) {
          removeExtraPlayer();
        }
      }
    }
  }, [homeScore, awayScore]);

  const formatTime = (seconds) => {
    if (seconds === undefined || seconds === null) return "00:00";
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  };

  const calculatePlayTimePercentage = (playerId) => {
    if (matchTime === 0) return 0;
    const playerTime = playerTimers[playerId] || 0;
    return Math.round((playerTime / matchTime) * 100);
  };

  const addPlayer = (name) => {
    if (name && name.trim()) {
      const newPlayer = {
        id: Date.now(),
        name: name.trim(),
        number: players.length + 1,
      };
      setPlayers([...players, newPlayer]);
    }
  };

  const selectPlayer = (player) => {
    setSelectedPlayers([...selectedPlayers, player]);
  };

  const removeSelectedPlayer = (id) => {
    setSelectedPlayers(selectedPlayers.filter((player) => player.id !== id));
  };

  const startMatch = () => {
    const maxPlayers = ageGroups[ageGroup]?.players || 7;
    const starting = selectedPlayers.slice(0, maxPlayers);
    const bench = selectedPlayers.slice(maxPlayers);

    setActivePlayers(starting);
    setBenchPlayers(bench);

    const timers = {};
    selectedPlayers.forEach((player) => {
      timers[player.id] = 0;
    });
    setPlayerTimers(timers);

    setCurrentView("match");
  };

  const substitutePlayer = (outId, inId) => {
    if (!outId || !inId) return;

    const outPlayer = activePlayers.find((p) => p.id === outId);
    const inPlayer = benchPlayers.find((p) => p.id === inId);

    if (!outPlayer || !inPlayer) return;

    setActivePlayers((prevActive) =>
      prevActive.map((p) => (p.id === outId ? inPlayer : p))
    );

    setBenchPlayers((prevBench) =>
      prevBench.map((p) => (p.id === inId ? outPlayer : p))
    );
  };

  const addExtraPlayer = () => {
    if (benchPlayers.length > 0) {
      const playerToAdd = benchPlayers[0];
      setActivePlayers((prev) => [...prev, playerToAdd]);
      setBenchPlayers((prev) => prev.slice(1));
    }
  };

  const removeExtraPlayer = () => {
    if (activePlayers.length > 0) {
      const playerToRemove = activePlayers[activePlayers.length - 1];
      setActivePlayers((prev) => prev.slice(0, -1));
      setBenchPlayers((prev) => [playerToRemove, ...prev]);
    }
  };

  const startTimer = () => {
    setIsRunning(true);
  };

  const stopTimer = () => {
    setIsRunning(false);
  };

  const resetMatch = () => {
    stopTimer();
    setMatchTime(0);
    setHomeScore(0);
    setAwayScore(0);
    setActivePlayers([]);
    setBenchPlayers([]);
    setPlayerTimers({});
    setExtraPlayerAllowed(false);
    setShowExtraPlayerMessage(false);
    setShowRemovePlayerMessage(false);
    setCurrentView("setup");
  };

  // Velkommen-visning
  if (currentView === "welcome") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-500 via-green-600 to-teal-700 p-4 flex items-center justify-center">
        <div className="max-w-md w-full">
          {/* Animated floating elements */}
          <div className="absolute inset-0 overflow-hidden pointer-events-none">
            <div className="absolute top-20 left-10 w-3 h-3 bg-white/20 rounded-full animate-pulse"></div>
            <div className="absolute top-40 right-16 w-2 h-2 bg-white/30 rounded-full animate-bounce delay-300"></div>
            <div className="absolute bottom-32 left-20 w-4 h-4 bg-white/10 rounded-full animate-pulse delay-700"></div>
          </div>
          
          <div className="relative bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-8 text-center border border-white/20">
            {/* Logo area */}
            <div className="w-20 h-20 bg-gradient-to-br from-green-400 to-emerald-600 rounded-2xl mx-auto mb-6 flex items-center justify-center shadow-lg">
              <div className="text-3xl">⚽</div>
            </div>
            
            <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 to-emerald-700 bg-clip-text text-transparent mb-3">
              Spilletid
            </h1>
            <p className="text-gray-600 mb-8 leading-relaxed">
              Et enkelt og moderne verktøy for å administrere spilletid i barnefotballen!
              <br />
              <span className="text-sm text-emerald-600">Flere idretter kommer...</span>
            </p>
            
            <button
              onClick={() => setCurrentView("setup")}
              className="group relative px-8 py-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl hover:from-green-600 hover:to-emerald-700 font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-xl"
            >
              <span className="flex items-center justify-center gap-2">
                ▶️ Start en ny kamp!
              </span>
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Oppsett-visning
  if (currentView === "setup") {
    const maxPlayers = ageGroups[ageGroup]?.players || 7;
    const canStartMatch = selectedPlayers.length >= maxPlayers;

    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-gray-100 p-4">
        <div className="max-w-md mx-auto">
          <div className="bg-white rounded-3xl shadow-xl p-6 border border-gray-100">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
                <div className="text-white text-lg">⚙️</div>
              </div>
              <h1 className="text-2xl font-bold text-gray-800">Kampoppsett</h1>
            </div>

            {/* Team Name */}
            <div className="mb-6">
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Lagnavn
              </label>
              <input
                type="text"
                value={teamName}
                onChange={(e) => setTeamName(e.target.value)}
                placeholder="Ditt lag"
                className="w-full p-4 border-2 border-gray-200 rounded-2xl focus:border-blue-500 focus:outline-none transition-colors bg-gray-50 focus:bg-white"
              />
            </div>

            {/* Age Group */}
            <div className="mb-6">
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Aldersklasse
              </label>
              <select
                value={ageGroup}
                onChange={(e) => setAgeGroup(e.target.value)}
                className="w-full p-4 border-2 border-gray-200 rounded-2xl focus:border-blue-500 focus:outline-none transition-colors bg-gray-50 focus:bg-white"
              >
                <option value="G6/J6">G6/J6 - 3v3 - 2x20 min</option>
                <option value="G7/J7">G7/J7 - 3v3 - 2x20 min</option>
                <option value="G8/J8">G8/J8 - 5v5 - 2x25 min</option>
                <option value="G9/J9">G9/J9 - 5v5 - 2x25 min</option>
                <option value="G10/J10">G10/J10 - 7v7 - 2x30 min</option>
                <option value="G11/J11">G11/J11 - 7v7 - 2x30 min</option>
                <option value="G12/J12">G12/J12 - 9v9 - 2x35 min</option>
              </select>
            </div>

            {/* Add Players */}
            <div className="mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                👥 Spillere
              </h2>
              
              <div className="flex gap-3 mb-4">
                <input
                  type="text"
                  placeholder="Spillernavn"
                  className="flex-1 p-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors bg-gray-50 focus:bg-white"
                  id="player-name-input"
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      const input = document.getElementById("player-name-input");
                      if (input) {
                        addPlayer(input.value);
                        input.value = "";
                      }
                    }
                  }}
                />
                <button
                  onClick={() => {
                    const input = document.getElementById("player-name-input");
                    if (input) {
                      addPlayer(input.value);
                      input.value = "";
                    }
                  }}
                  className="px-4 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl"
                >
                  ➕
                </button>
              </div>

              {/* Available Players */}
              <div className="mb-6">
                <h3 className="font-semibold mb-3 text-gray-700">Tilgjengelige spillere:</h3>
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {players
                    .filter((p) => !selectedPlayers.some((sp) => sp.id === p.id))
                    .map((player) => (
                      <div
                        key={player.id}
                        className="flex items-center justify-between p-3 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl border border-gray-200 hover:from-blue-50 hover:to-indigo-50 hover:border-blue-200 transition-all duration-200"
                      >
                        <span className="font-medium text-gray-700">
                          #{player.number} {player.name}
                        </span>
                        <button
                          onClick={() => selectPlayer(player)}
                          className="px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg text-sm hover:from-blue-600 hover:to-indigo-700 transition-all duration-200 shadow-md hover:shadow-lg"
                        >
                          Velg
                        </button>
                      </div>
                    ))}
                </div>
              </div>

              {/* Selected Players */}
              <div className="mb-6">
                <h3 className="font-semibold mb-3 text-gray-700 flex items-center gap-2">
                  Valgte spillere: 
                  <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm">
                    {selectedPlayers.length}
                  </span>
                </h3>
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {selectedPlayers.map((player) => (
                    <div
                      key={player.id}
                      className="flex items-center justify-between p-3 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-200"
                    >
                      <span className="font-medium text-gray-700">
                        #{player.number} {player.name}
                      </span>
                      <button
                        onClick={() => removeSelectedPlayer(player.id)}
                        className="px-4 py-2 bg-gradient-to-r from-red-500 to-pink-600 text-white rounded-lg text-sm hover:from-red-600 hover:to-pink-700 transition-all duration-200 shadow-md hover:shadow-lg"
                      >
                        Fjern
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Start Match Button */}
            {canStartMatch ? (
              <button
                onClick={startMatch}
                className="w-full py-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl hover:from-green-600 hover:to-emerald-700 font-bold text-lg transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl"
              >
                <span className="flex items-center justify-center gap-2">
                  ▶️ Start kamp
                </span>
              </button>
            ) : (
              <div className="p-4 bg-gradient-to-r from-amber-50 to-orange-50 border-2 border-amber-200 rounded-2xl text-center">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <div className="text-amber-600 text-lg">⚠️</div>
                  <p className="text-sm font-semibold text-amber-800">
                    Du må velge minst {maxPlayers} spillere for å starte kampen.
                  </p>
                </div>
                <p className="text-sm text-amber-700">
                  Mangler <span className="font-bold">{maxPlayers - selectedPlayers.length}</span> spillere.
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // Kamp-visning
  if (currentView === "match") {
    const maxPlayers = ageGroups[ageGroup]?.players || 7;

    return (
      <div className="min-h-screen bg-gradient-to-br from-green-900 via-emerald-800 to-teal-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-6 border border-white/20">
            {/* Header Navigation */}
            <div className="flex justify-between mb-6">
              <button
                onClick={() => setCurrentView("setup")}
                className="flex items-center gap-2 px-4 py-2 rounded-xl bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-700 transition-all duration-200 shadow-md"
              >
                <span>⚙️</span> Oppsett
              </button>
              <button
                onClick={() => setCurrentView("statistics")}
                className="flex items-center gap-2 px-4 py-2 rounded-xl bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white transition-all duration-200 shadow-md"
              >
                <span>📊</span> Statistikk
              </button>
            </div>

            {/* Match Header */}
            <div className="text-center mb-6">
              <div className="inline-flex items-center gap-2 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold mb-3">
                <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
                LIVE
              </div>
              <h1 className="text-xl font-bold text-gray-800 mb-2">
                {teamName || "Mitt lag"}
              </h1>
              <div className="text-5xl font-bold bg-gradient-to-r from-green-600 to-emerald-700 bg-clip-text text-transparent mb-2">
                {formatTime(matchTime)}
              </div>
              <div className="text-sm text-gray-500 bg-gray-100 rounded-full px-3 py-1 inline-block">
                {ageGroups[ageGroup]?.time || "2x30 min"}
              </div>
            </div>

            {/* Timer Controls */}
            <div className="flex justify-center gap-3 mb-6">
              <button
                onClick={isRunning ? stopTimer : startTimer}
                className={`flex items-center gap-2 px-6 py-3 rounded-2xl text-white font-semibold transition-all duration-300 shadow-lg hover:shadow-xl ${
                  isRunning
                    ? "bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700"
                    : "bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700"
                }`}
              >
                <span>{isRunning ? "⏸️" : "▶️"}</span>
                {isRunning ? "Pause" : "Start"}
              </button>
              <button
                onClick={() => {
                  stopTimer();
                  setMatchTime(0);
                  const timers = {};
                  selectedPlayers.forEach((player) => {
                    timers[player.id] = 0;
                  });
                  setPlayerTimers(timers);
                }}
                className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-red-500 to-pink-600 text-white rounded-2xl hover:from-red-600 hover:to-pink-700 font-semibold transition-all duration-300 shadow-lg hover:shadow-xl"
              >
                <span>🔄</span>
                Reset
              </button>
            </div>

            {/* Score */}
            <div className="flex justify-center items-center gap-6 mb-6 p-6 bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl border border-gray-200">
              <div className="text-center">
                <div className="text-sm font-semibold text-gray-600 mb-2">Hjemme</div>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setHomeScore(Math.max(0, homeScore - 1))}
                    className="w-10 h-10 bg-gradient-to-r from-red-500 to-pink-600 text-white rounded-xl hover:from-red-600 hover:to-pink-700 transition-all duration-200 shadow-lg flex items-center justify-center"
                  >
                    ➖
                  </button>
                  <span className="text-3xl font-bold text-gray-800 w-12 text-center">{homeScore}</span>
                  <button
                    onClick={() => setHomeScore(homeScore + 1)}
                    className="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-200 shadow-lg flex items-center justify-center"
                  >
                    ➕
                  </button>
                </div>
              </div>
              <div className="text-2xl font-bold text-gray-400">-</div>
              <div className="text-center">
                <div className="text-sm font-semibold text-gray-600 mb-2">Borte</div>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setAwayScore(Math.max(0, awayScore - 1))}
                    className="w-10 h-10 bg-gradient-to-r from-red-500 to-pink-600 text-white rounded-xl hover:from-red-600 hover:to-pink-700 transition-all duration-200 shadow-lg flex items-center justify-center"
                  >
                    ➖
                  </button>
                  <span className="text-3xl font-bold text-gray-800 w-12 text-center">{awayScore}</span>
                  <button
                    onClick={() => setAwayScore(awayScore + 1)}
                    className="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-200 shadow-lg flex items-center justify-center"
                  >
                    ➕
                  </button>
                </div>
              </div>
            </div>

            {/* Notifications */}
            {showExtraPlayerMessage && (
              <div className="mb-4 p-4 bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-200 rounded-2xl">
                <div className="flex items-center gap-3">
                  <span className="text-green-600 text-xl">✅</span>
                  <p className="text-sm text-green-800 font-semibold">
                    4+ mål forskjell! En ekstra spiller er lagt til.
                  </p>
                </div>
              </div>
            )}

            {showRemovePlayerMessage && (
              <div className="mb-4 p-4 bg-gradient-to-r from-orange-50 to-amber-50 border-2 border-orange-200 rounded-2xl">
                <div className="flex items-center gap-3">
                  <span className="text-orange-600 text-xl">⚠️</span>
                  <p className="text-sm text-orange-800 font-semibold">
                    Mindre enn 4 mål forskjell! En spiller er tatt av banen.
                  </p>
                </div>
              </div>
            )}

            {/* Status */}
            <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-2xl">
              <p className="text-sm text-blue-800 text-center">
                <span className="font-semibold">Status:</span>{" "}
                <span className={`font-bold ${isRunning ? 'text-green-600' : 'text-orange-600'}`}>
                  {isRunning ? "Tiden løper" : "Pause"}
                </span>
                <br />
                <span className="text-xs text-blue-600">
                  Spillertid telles kun når spilleren er på banen
                </span>
              </p>
            </div>

            {/* Players on Field */}
            <div className="mb-6">
              <h3 className="font-bold mb-4 flex items-center gap-2 text-gray-800">
                <span>👥</span>
                På banen ({activePlayers.length}/{maxPlayers}
                {extraPlayerAllowed ? "+1" : ""})
              </h3>
              <div className="space-y-3">
                {activePlayers.map((player) => {
                  const playerTime = playerTimers[player.id] || 0;
                  const percentage = calculatePlayTimePercentage(player.id);

                  return (
                    <div
                      key={player.id}
                      className="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl border-2 border-green-200"
                    >
                      <div className="flex-1">
                        <div className="font-semibold text-gray-800">
                          #{player.number} {player.name}
                        </div>
                        <div className="text-sm text-gray-600 flex items-center gap-2 mt-1">
                          <span>⏱️</span>
                          {formatTime(playerTime)}
                          <span className="bg-green-100 text-green-800 px-2 py-0.5 rounded-full text-xs font-semibold">
                            {percentage}%
                          </span>
                        </div>
                      </div>
                      {benchPlayers.length > 0 && (
                        <select
                          onChange={(e) => {
                            const benchPlayerId = parseInt(e.target.value);
                            if (benchPlayerId) {
                              substitutePlayer(player.id, benchPlayerId);
                              e.target.value = "";
                            }
                          }}
                          className="text-sm p-2 border-2 border-gray-200 rounded-xl bg-white focus:border-blue-500 focus:outline-none transition-colors"
                          value=""
                        >
                          <option value="">Bytt med</option>
                          {benchPlayers.map((benchPlayer) => (
                            <option key={benchPlayer.id} value={benchPlayer.id}>
                              {benchPlayer.name}
                            </option>
                          ))}
                        </select>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Players on Bench */}
            <div className="mb-6">
              <h3 className="font-bold mb-4 text-gray-800">
                Benken ({benchPlayers.length})
              </h3>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {benchPlayers.map((player) => {
                  const playerTime = playerTimers[player.id] || 0;
                  const percentage = calculatePlayTimePercentage(player.id);

                  return (
                    <div
                      key={player.id}
                      className="flex items-center justify-between p-3 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl border border-gray-200"
                    >
                      <div>
                        <div className="font-medium text-gray-700">
                          #{player.number} {player.name}
                        </div>
                        <div className="text-sm text-gray-600 flex items-center gap-1 mt-1">
                          <span>⏱️</span>
                          {formatTime(playerTime)}
                          <span className="bg-gray-100 text-gray-700 px-2 py-0.5 rounded-full text-xs">
                            {percentage}%
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>

            <button
              onClick={resetMatch}
              className="w-full py-3 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-2xl hover:from-gray-700 hover:to-gray-800 font-semibold transition-all duration-300 shadow-lg hover:shadow-xl"
            >
              Avslutt kamp
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Statistikk-visning
  if (currentView === "statistics") {
    const sortedPlayers = [...selectedPlayers].sort((a, b) => {
      const timeA = playerTimers[a.id] || 0;
      const timeB = playerTimers[b.id] || 0;
      return timeB - timeA;
    });

    const totalPossibleSeconds = (ageGroups[ageGroup]?.totalMinutes || 60) * 60;

    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-800 to-blue-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-6 border border-white/20">
            {/* Header Navigation */}
            <div className="flex justify-between mb-6">
              <button
                onClick={() => setCurrentView("setup")}
                className="flex items-center gap-2 px-4 py-2 rounded-xl bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-700 transition-all duration-200 shadow-md"
              >
                <span>⚙️</span> Oppsett
              </button>
              <button
                onClick={() => setCurrentView("match")}
                className="flex items-center gap-2 px-4 py-2 rounded-xl bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white transition-all duration-200 shadow-md"
              >
                <span>🔙</span> Tilbake til kamp
              </button>
            </div>

            {/* Statistics Header */}
            <div className="text-center mb-6">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-2xl mx-auto mb-4 flex items-center justify-center shadow-lg">
                <span className="text-2xl">📊</span>
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-indigo-700 bg-clip-text text-transparent mb-4">
                Spilletidsstatistikk
              </h1>
            </div>

            {/* Match Summary */}
            <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl mb-6 border-2 border-blue-200">
              <div className="flex items-center justify-between mb-2">
                <div className="text-sm font-semibold text-gray-700">
                  {teamName || "Mitt lag"}
                </div>
                <div className="flex items-center gap-2">
                  <span>🏆</span>
                  <span className="font-bold text-lg">
                    {homeScore}-{awayScore}
                  </span>
                </div>
              </div>
              <div className="text-xs text-gray-600 flex justify-between">
                <span>{ageGroups[ageGroup]?.time || "2x30 min"}</span>
                <span>Total tid: {formatTime(matchTime)}</span>
              </div>
            </div>

            {/* Player Statistics */}
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {sortedPlayers.map((player, index) => {
                const playerTime = playerTimers[player.id] || 0;
                const percentage = calculatePlayTimePercentage(player.id);
                const percentageOfTotal =
                  totalPossibleSeconds > 0
                    ? Math.round((playerTime / totalPossibleSeconds) * 100)
                    : 0;

                const isOnField = activePlayers.some((p) => p.id === player.id);

                return (
                  <div
                    key={player.id}
                    className={`p-4 rounded-2xl border-2 transition-all duration-300 ${
                      isOnField 
                        ? "bg-gradient-to-r from-green-50 to-emerald-50 border-green-200" 
                        : "bg-gradient-to-r from-gray-50 to-gray-100 border-gray-200"
                    }`}
                  >
                    {/* Player rank badge */}
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex items-center gap-3">
                        <div className={`w-8 h-8 rounded-xl flex items-center justify-center text-xs font-bold ${
                          index === 0 ? 'bg-yellow-400 text-yellow-900' :
                          index === 1 ? 'bg-gray-300 text-gray-700' :
                          index === 2 ? 'bg-amber-600 text-white' :
                          'bg-blue-100 text-blue-800'
                        }`}>
                          {index + 1}
                        </div>
                        <div>
                          <div className="font-semibold text-gray-800">
                            #{player.number} {player.name}
                          </div>
                          {isOnField && (
                            <div className="text-xs text-green-600 font-semibold flex items-center gap-1">
                              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                              På banen
                            </div>
                          )}
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-lg text-gray-800">
                          {formatTime(playerTime)}
                        </div>
                      </div>
                    </div>
                    
                    {/* Progress bar */}
                    <div className="w-full bg-gray-200 rounded-full h-3 mb-2">
                      <div
                        className={`h-3 rounded-full transition-all duration-500 ${
                          isOnField 
                            ? "bg-gradient-to-r from-green-400 to-emerald-500" 
                            : "bg-gradient-to-r from-blue-400 to-indigo-500"
                        }`}
                        style={{ width: `${Math.max(percentage, 2)}%` }}
                      ></div>
                    </div>
                    
                    {/* Percentage info */}
                    <div className="flex justify-between text-xs text-gray-600">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-semibold">
                        Av spilt tid: {percentage}%
                      </span>
                      <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full font-semibold">
                        Av hele kampen: {percentageOfTotal}%
                      </span>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Standardvisning (skulle ikke skje)
  return (
    <div className="min-h-screen bg-gradient-to-br from-red-500 to-pink-600 p-4 flex items-center justify-center">
      <button
        onClick={() => setCurrentView("welcome")}
        className="px-6 py-3 bg-white text-gray-800 rounded-lg hover:bg-gray-100 font-semibold shadow-lg"
      >
        Gå til forsiden
      </button>
    </div>
  );
};

export default FotballApp;
